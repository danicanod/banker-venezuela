import { StrategicLogger, LogLevel, LogContext } from '../shared/utils/strategic-logger';

// Configurar para modo PRODUCTION expl√≠citamente antes de usar el logger
process.env.NODE_ENV = 'production';

async function demonstrateMinimalLogging() {
  const logger = StrategicLogger.getInstance();
  
  // Forzar contexto de producci√≥n
  logger.setContext(LogContext.PRODUCTION);
  
  console.log('üîß DEMOSTRACI√ìN DE LOGGING M√çNIMO (PRODUCTION)');
  console.log('=============================================\n');

  const demoLogger = logger.createComponentLogger('MINIMAL-DEMO');
  
  console.log('üìä Configuraci√≥n actual:');
  const config = logger.getConfig();
  console.log(`   - Contexto: ${config.context}`);
  console.log(`   - Nivel: ${LogLevel[config.level]} (${config.level})`);
  console.log(`   - Solo se mostrar√°n: ERRORES (1) y ADVERTENCIAS (2)\n`);
  
  console.log('üîç PROBANDO DIFERENTES TIPOS DE LOGS:');
  console.log('=====================================\n');

  console.log('‚ùå ERROR - DEBER√çA APARECER:');
  demoLogger.error('Error cr√≠tico del sistema', new Error('Fallo de conexi√≥n a base de datos'));
  
  console.log('\n‚ö†Ô∏è  WARN - DEBER√çA APARECER:');
  demoLogger.warn('Memoria baja detectada', { available: '50MB', threshold: '100MB' });
  demoLogger.security('Intento de acceso no autorizado', { ip: '192.168.1.100', attempts: 5 });
  
  console.log('\n‚ÑπÔ∏è  INFO - NO DEBER√çA APARECER:');
  demoLogger.info('Sistema iniciado correctamente');
  demoLogger.success('Login exitoso');
  
  console.log('\nüîß DEBUG - NO DEBER√çA APARECER:');
  demoLogger.debug('Informaci√≥n de debug detallada', { userId: 123 });
  demoLogger.network('Request HTTP completado', { status: 200, time: 245 });
  demoLogger.data('Datos procesados', { records: 1500 });
  
  console.log('\nüîç TRACE - NO DEBER√çA APARECER:');
  demoLogger.trace('Trazabilidad ultra detallada');
  
  console.log('\n‚ö° PERFORMANCE MONITORING:');
  console.log('==========================\n');
  
  // Performance en producci√≥n - solo fitness functions aparecer√°n si son > WARN
  const opId = demoLogger.startOperation('critical_operation');
  await simulateWork(2000);
  demoLogger.endOperation(opId);
  
  console.log('\nüÜö COMPARACI√ìN CON DESARROLLO:');
  console.log('==============================\n');
  
  console.log('üîÑ Cambiando temporalmente a DEVELOPMENT...');
  logger.setContext(LogContext.DEVELOPMENT);
  
  console.log('\nAhora en DEVELOPMENT (INFO level) - M√ÅS LOGS APARECER√ÅN:');
  demoLogger.info('Este mensaje S√ç aparece en development');
  demoLogger.debug('Este debug NO aparece a√∫n (level INFO)');
  
  console.log('\nüîÑ Cambiando a DEBUG context...');
  logger.setContext(LogContext.DEBUG);
  
  console.log('\nAhora en DEBUG (TRACE level) - TODOS LOS LOGS APARECEN:');
  demoLogger.trace('Este trace S√ç aparece en debug');
  demoLogger.debug('Este debug S√ç aparece en debug');
  demoLogger.data('Estos datos S√ç aparecen en debug', { verbose: true });
  
  console.log('\nüîÑ Volviendo a PRODUCTION...');
  logger.setContext(LogContext.PRODUCTION);
  
  console.log('\nDe vuelta en PRODUCTION - SOLO ERRORES Y WARNS:');
  demoLogger.info('Este mensaje NO aparece de nuevo');
  demoLogger.warn('Este warning S√ç aparece de nuevo');
  
  console.log('\nüìã RESUMEN DE LA DEMO:');
  console.log('======================');
  console.log('‚úÖ En PRODUCTION solo viste ERRORES y ADVERTENCIAS');
  console.log('‚úÖ Logs INFO, DEBUG y TRACE fueron silenciados autom√°ticamente');
  console.log('‚úÖ Performance metrics solo aparecen si superan el threshold WARNING');
  console.log('‚úÖ Stack traces de errores se ocultan en production por seguridad');
  console.log('‚úÖ El sistema se adapta autom√°ticamente seg√∫n NODE_ENV');
  
  // Generar reporte final
  logger.generateSessionReport();
}

async function simulateWork(ms: number): Promise<void> {
  return new Promise(resolve => setTimeout(resolve, ms));
}

console.log('üöÄ Iniciando demostraci√≥n de LOGGING M√çNIMO...\n');

demonstrateMinimalLogging()
  .then(() => {
    console.log('\n‚úÖ Demostraci√≥n de logging m√≠nimo completada!');
    console.log('\nüìù COMANDOS RELACIONADOS:');
    console.log('=========================');
    console.log('npm run demo:minimal             # Esta demo de logging m√≠nimo');
    console.log('NODE_ENV=production npm run test:extraction  # Test real con logs m√≠nimos');
    console.log('DEBUG=true npm run test:extraction           # Test con m√°ximo detalle');
  })
  .catch(console.error); 